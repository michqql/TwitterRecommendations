package me.mpearso.twitter.gui.panels;

import me.mpearso.twitter.gui.ContentPanel;
import me.mpearso.twitter.gui.TRMainWindow;
import me.mpearso.twitter.gui.util.StringSize;
import me.mpearso.twitter.login.LoginHandler;
import twitter4j.TwitterException;

import javax.swing.*;
import java.awt.*;
import java.awt.geom.Rectangle2D;

public class LoginPanel extends ContentPanel {

    private final LoginHandler loginHandler;

    private JLabel infoText1;
    private JLabel infoText2;

    private JButton authButton;

    private JLabel errorText;
    private int errorCount;
    private JTextField pinField;

    public LoginPanel(TRMainWindow mainWindow, LoginHandler loginHandler) {
        super(mainWindow);
        this.loginHandler = loginHandler;

        setBackground(TRMainWindow.BACKGROUND_COLOUR);
        setPreferredSize(new Dimension(100, 100));
        setLayout(null);
        refresh();
    }

    public void refresh() {
        boolean logged = loginHandler.isAuthenticated();
        if(logged) {
            return;
        }

        loginHandler.setAuthenticationRunnable(() ->
                mainWindow.setContentPanel(TRMainWindow.ContentPanel.RECOMMENDATIONS));

        // Login label
        {
            this.infoText1 = new JLabel("You are not logged in, please press the button below to authenticate");
            infoText1.setFont(StringSize.DEFAULT_FONT);
            Rectangle2D bounds = StringSize.getStringBounds(infoText1.getText(), infoText1.getFont());
            infoText1.setForeground(TRMainWindow.TEXT_COLOUR);
            infoText1.setBounds(TRMainWindow.WIDTH / 2 - (int) (bounds.getWidth() / 2),
                    160,
                    (int) bounds.getWidth(),
                    (int) bounds.getHeight());
            this.add(infoText1);
        }

        // Enter pin text
        {
            this.infoText2 = new JLabel("and then enter the given pin in the text field below!");
            infoText2.setFont(StringSize.DEFAULT_FONT);
            Rectangle2D bounds = StringSize.getStringBounds(infoText2.getText(), infoText2.getFont());
            infoText2.setForeground(TRMainWindow.TEXT_COLOUR);
            infoText2.setBounds(TRMainWindow.WIDTH / 2 - (int) (bounds.getWidth() / 2),
                    200,
                    (int) bounds.getWidth(),
                    (int) bounds.getHeight());
            this.add(infoText2);
        }

        // Authenticate button
        {
            this.authButton = new JButton("Authenticate");
            authButton.setSize(10, 10);

            authButton.setBounds(TRMainWindow.WIDTH / 2 - 80, 250, 160, 40);
            authButton.addActionListener(e -> loginHandler.openURLInDefaultBrowser());
            this.add(authButton);
        }

        // Pin text field
        {
            this.errorText = new JLabel();
            errorText.setForeground(TRMainWindow.ERROR_TEXT_COLOUR);
            errorText.setFont(StringSize.DEFAULT_FONT);
            this.add(errorText);

            this.pinField = new JTextField();
            pinField.setSize(10, 10);
            pinField.setBounds(TRMainWindow.WIDTH / 2 - 80, 300, 160, 40);
            pinField.setToolTipText("Once entered, press ENTER to login");
            pinField.setHorizontalAlignment(JTextField.CENTER);
            pinField.addActionListener(e -> {
                String text = pinField.getText();

                // Check if the user has entered nothing
                if(text.isEmpty()) {
                    setErrorText("Pin field is empty!");
                    return;
                }

                // Check if the text is of valid length
                if(text.length() > 10) {
                    pinField.setText(text.substring(0, 11));
                    setErrorText("Pin is too long!");
                    return;
                }

                // Check the text only contains digits,
                // as pins generated by Twitter only contain digits
                char[] chars = text.toCharArray();
                for(char c : chars) {
                    if(!Character.isDigit(c)) {
                        setErrorText("Pins can only consist of numbers!");
                        return;
                    }
                }

                // Try login, if unsuccessful inform the user the pin was incorrect
                try {
                    loginHandler.setPin(pinField.getText());
                } catch (TwitterException error) {
                    setErrorText("Incorrect pin!");
                }
            });
            this.add(pinField);
        }
    }

    private void setErrorText(String text) {
        if(text == null) {
            errorText.setText("");
            return;
        }

        String current = errorText.getText();
        if(current.startsWith(text)) {
            errorCount++;
            text = text + " x" + (errorCount + 1);
        } else {
            errorCount = 0;
        }

        errorText.setText(text);

        Rectangle2D bounds = StringSize.getStringBounds(errorText.getText(), errorText.getFont());
        errorText.setBounds(TRMainWindow.WIDTH / 2 - (int) (bounds.getWidth() / 2),
                340,
                (int) bounds.getWidth(),
                (int) bounds.getHeight());
    }
}
